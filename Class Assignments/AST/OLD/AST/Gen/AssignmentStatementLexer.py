# Generated from /Users/elhamgholami/PycharmProjects/InClassPresentation/AssignmentStatement.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,154,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,13,4,13,89,8,13,11,13,12,13,90,1,14,4,14,94,8,14,11,14,12,
        14,95,1,14,1,14,5,14,100,8,14,10,14,12,14,103,9,14,1,14,1,14,4,14,
        107,8,14,11,14,12,14,108,3,14,111,8,14,1,15,1,15,1,15,5,15,116,8,
        15,10,15,12,15,119,9,15,1,15,1,15,1,16,1,16,1,16,5,16,126,8,16,10,
        16,12,16,129,9,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,3,19,139,
        8,19,1,20,4,20,142,8,20,11,20,12,20,143,1,20,1,20,1,21,1,21,1,22,
        1,22,1,22,3,22,153,8,22,1,117,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,
        0,39,0,41,18,43,19,45,20,1,0,3,1,0,48,57,2,0,65,90,97,122,3,0,9,
        9,13,13,32,32,162,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,1,47,1,0,0,0,3,50,1,0,0,0,5,55,1,0,0,0,7,60,1,0,0,
        0,9,62,1,0,0,0,11,65,1,0,0,0,13,71,1,0,0,0,15,75,1,0,0,0,17,77,1,
        0,0,0,19,79,1,0,0,0,21,81,1,0,0,0,23,83,1,0,0,0,25,85,1,0,0,0,27,
        88,1,0,0,0,29,110,1,0,0,0,31,112,1,0,0,0,33,122,1,0,0,0,35,130,1,
        0,0,0,37,132,1,0,0,0,39,138,1,0,0,0,41,141,1,0,0,0,43,147,1,0,0,
        0,45,152,1,0,0,0,47,48,5,105,0,0,48,49,5,102,0,0,49,2,1,0,0,0,50,
        51,5,116,0,0,51,52,5,104,0,0,52,53,5,101,0,0,53,54,5,110,0,0,54,
        4,1,0,0,0,55,56,5,101,0,0,56,57,5,108,0,0,57,58,5,115,0,0,58,59,
        5,101,0,0,59,6,1,0,0,0,60,61,5,62,0,0,61,8,1,0,0,0,62,63,5,58,0,
        0,63,64,5,61,0,0,64,10,1,0,0,0,65,66,5,98,0,0,66,67,5,101,0,0,67,
        68,5,103,0,0,68,69,5,105,0,0,69,70,5,110,0,0,70,12,1,0,0,0,71,72,
        5,101,0,0,72,73,5,110,0,0,73,74,5,100,0,0,74,14,1,0,0,0,75,76,5,
        43,0,0,76,16,1,0,0,0,77,78,5,45,0,0,78,18,1,0,0,0,79,80,5,42,0,0,
        80,20,1,0,0,0,81,82,5,47,0,0,82,22,1,0,0,0,83,84,5,40,0,0,84,24,
        1,0,0,0,85,86,5,41,0,0,86,26,1,0,0,0,87,89,3,35,17,0,88,87,1,0,0,
        0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,28,1,0,0,0,92,94,
        3,35,17,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,
        0,96,97,1,0,0,0,97,101,5,46,0,0,98,100,3,35,17,0,99,98,1,0,0,0,100,
        103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,111,1,0,0,0,103,101,
        1,0,0,0,104,106,5,46,0,0,105,107,3,35,17,0,106,105,1,0,0,0,107,108,
        1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,93,1,
        0,0,0,110,104,1,0,0,0,111,30,1,0,0,0,112,117,5,34,0,0,113,116,3,
        39,19,0,114,116,9,0,0,0,115,113,1,0,0,0,115,114,1,0,0,0,116,119,
        1,0,0,0,117,118,1,0,0,0,117,115,1,0,0,0,118,120,1,0,0,0,119,117,
        1,0,0,0,120,121,5,34,0,0,121,32,1,0,0,0,122,127,3,37,18,0,123,126,
        3,37,18,0,124,126,3,35,17,0,125,123,1,0,0,0,125,124,1,0,0,0,126,
        129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,34,1,0,0,0,129,127,
        1,0,0,0,130,131,7,0,0,0,131,36,1,0,0,0,132,133,7,1,0,0,133,38,1,
        0,0,0,134,135,5,92,0,0,135,139,5,34,0,0,136,137,5,92,0,0,137,139,
        5,92,0,0,138,134,1,0,0,0,138,136,1,0,0,0,139,40,1,0,0,0,140,142,
        7,2,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,
        1,0,0,0,144,145,1,0,0,0,145,146,6,20,0,0,146,42,1,0,0,0,147,148,
        5,10,0,0,148,44,1,0,0,0,149,150,5,60,0,0,150,153,5,61,0,0,151,153,
        5,60,0,0,152,149,1,0,0,0,152,151,1,0,0,0,153,46,1,0,0,0,13,0,90,
        95,101,108,110,115,117,125,127,138,143,152,1,6,0,0
    ]

class AssignmentStatementLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    INT = 14
    FLOAT = 15
    String = 16
    ID = 17
    WS = 18
    NEWLINE = 19
    RELOP = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'then'", "'else'", "'>'", "':='", "'begin'", "'end'", 
            "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "String", "ID", "WS", "NEWLINE", "RELOP" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "INT", 
                  "FLOAT", "String", "ID", "DIGIT", "LETTER", "ESC", "WS", 
                  "NEWLINE", "RELOP" ]

    grammarFileName = "AssignmentStatement.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


