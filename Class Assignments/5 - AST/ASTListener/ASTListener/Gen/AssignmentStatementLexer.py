# Generated from D:/Bahareh/7/Files/Compiler/Git/Compiler-Design/Class Assignments/5 - AST/ASTListener/ASTListener/AssignmentStatement.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,276,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,4,23,170,8,23,11,23,12,23,171,1,24,4,24,175,8,24,11,24,
        12,24,176,1,24,1,24,5,24,181,8,24,10,24,12,24,184,9,24,1,24,1,24,
        4,24,188,8,24,11,24,12,24,189,3,24,192,8,24,1,25,1,25,1,25,5,25,
        197,8,25,10,25,12,25,200,9,25,1,25,1,25,1,26,1,26,1,26,5,26,207,
        8,26,10,26,12,26,210,9,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,5,28,221,8,28,10,28,12,28,224,9,28,1,28,1,28,1,29,1,29,1,29,
        1,29,5,29,232,8,29,10,29,12,29,235,9,29,1,29,1,29,1,30,1,30,1,30,
        1,30,5,30,243,8,30,10,30,12,30,246,9,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,33,1,33,3,33,258,8,33,1,34,4,34,261,8,34,11,34,
        12,34,262,1,34,1,34,1,35,1,35,1,35,3,35,270,8,35,1,36,1,36,1,36,
        3,36,275,8,36,1,198,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,0,65,0,67,0,69,32,71,33,73,34,1,0,3,1,0,48,57,2,0,65,90,97,122,
        3,0,9,9,13,13,32,32,288,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,1,75,1,0,0,0,3,83,1,0,0,0,5,87,1,0,0,0,7,89,1,0,0,0,9,95,
        1,0,0,0,11,99,1,0,0,0,13,106,1,0,0,0,15,112,1,0,0,0,17,116,1,0,0,
        0,19,119,1,0,0,0,21,124,1,0,0,0,23,129,1,0,0,0,25,133,1,0,0,0,27,
        135,1,0,0,0,29,137,1,0,0,0,31,139,1,0,0,0,33,145,1,0,0,0,35,152,
        1,0,0,0,37,157,1,0,0,0,39,160,1,0,0,0,41,162,1,0,0,0,43,164,1,0,
        0,0,45,166,1,0,0,0,47,169,1,0,0,0,49,191,1,0,0,0,51,193,1,0,0,0,
        53,203,1,0,0,0,55,211,1,0,0,0,57,216,1,0,0,0,59,227,1,0,0,0,61,238,
        1,0,0,0,63,249,1,0,0,0,65,251,1,0,0,0,67,257,1,0,0,0,69,260,1,0,
        0,0,71,269,1,0,0,0,73,274,1,0,0,0,75,76,5,112,0,0,76,77,5,114,0,
        0,77,78,5,111,0,0,78,79,5,103,0,0,79,80,5,114,0,0,80,81,5,97,0,0,
        81,82,5,109,0,0,82,2,1,0,0,0,83,84,5,118,0,0,84,85,5,97,0,0,85,86,
        5,114,0,0,86,4,1,0,0,0,87,88,5,58,0,0,88,6,1,0,0,0,89,90,5,102,0,
        0,90,91,5,108,0,0,91,92,5,111,0,0,92,93,5,97,0,0,93,94,5,116,0,0,
        94,8,1,0,0,0,95,96,5,105,0,0,96,97,5,110,0,0,97,98,5,116,0,0,98,
        10,1,0,0,0,99,100,5,115,0,0,100,101,5,116,0,0,101,102,5,114,0,0,
        102,103,5,105,0,0,103,104,5,110,0,0,104,105,5,103,0,0,105,12,1,0,
        0,0,106,107,5,98,0,0,107,108,5,101,0,0,108,109,5,103,0,0,109,110,
        5,105,0,0,110,111,5,110,0,0,111,14,1,0,0,0,112,113,5,101,0,0,113,
        114,5,110,0,0,114,115,5,100,0,0,115,16,1,0,0,0,116,117,5,105,0,0,
        117,118,5,102,0,0,118,18,1,0,0,0,119,120,5,116,0,0,120,121,5,104,
        0,0,121,122,5,101,0,0,122,123,5,110,0,0,123,20,1,0,0,0,124,125,5,
        101,0,0,125,126,5,108,0,0,126,127,5,115,0,0,127,128,5,101,0,0,128,
        22,1,0,0,0,129,130,5,102,0,0,130,131,5,111,0,0,131,132,5,114,0,0,
        132,24,1,0,0,0,133,134,5,40,0,0,134,26,1,0,0,0,135,136,5,59,0,0,
        136,28,1,0,0,0,137,138,5,41,0,0,138,30,1,0,0,0,139,140,5,119,0,0,
        140,141,5,104,0,0,141,142,5,105,0,0,142,143,5,108,0,0,143,144,5,
        101,0,0,144,32,1,0,0,0,145,146,5,115,0,0,146,147,5,119,0,0,147,148,
        5,105,0,0,148,149,5,116,0,0,149,150,5,99,0,0,150,151,5,104,0,0,151,
        34,1,0,0,0,152,153,5,99,0,0,153,154,5,97,0,0,154,155,5,115,0,0,155,
        156,5,101,0,0,156,36,1,0,0,0,157,158,5,58,0,0,158,159,5,61,0,0,159,
        38,1,0,0,0,160,161,5,43,0,0,161,40,1,0,0,0,162,163,5,45,0,0,163,
        42,1,0,0,0,164,165,5,42,0,0,165,44,1,0,0,0,166,167,5,47,0,0,167,
        46,1,0,0,0,168,170,3,63,31,0,169,168,1,0,0,0,170,171,1,0,0,0,171,
        169,1,0,0,0,171,172,1,0,0,0,172,48,1,0,0,0,173,175,3,63,31,0,174,
        173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,
        178,1,0,0,0,178,182,5,46,0,0,179,181,3,63,31,0,180,179,1,0,0,0,181,
        184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,192,1,0,0,0,184,
        182,1,0,0,0,185,187,5,46,0,0,186,188,3,63,31,0,187,186,1,0,0,0,188,
        189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,1,0,0,0,191,
        174,1,0,0,0,191,185,1,0,0,0,192,50,1,0,0,0,193,198,5,34,0,0,194,
        197,3,67,33,0,195,197,9,0,0,0,196,194,1,0,0,0,196,195,1,0,0,0,197,
        200,1,0,0,0,198,199,1,0,0,0,198,196,1,0,0,0,199,201,1,0,0,0,200,
        198,1,0,0,0,201,202,5,34,0,0,202,52,1,0,0,0,203,208,3,65,32,0,204,
        207,3,65,32,0,205,207,3,63,31,0,206,204,1,0,0,0,206,205,1,0,0,0,
        207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,54,1,0,0,0,210,
        208,1,0,0,0,211,212,3,53,26,0,212,213,5,91,0,0,213,214,3,47,23,0,
        214,215,5,93,0,0,215,56,1,0,0,0,216,217,5,91,0,0,217,222,3,47,23,
        0,218,219,5,44,0,0,219,221,3,47,23,0,220,218,1,0,0,0,221,224,1,0,
        0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,0,
        0,0,225,226,5,93,0,0,226,58,1,0,0,0,227,228,5,91,0,0,228,233,3,49,
        24,0,229,230,5,44,0,0,230,232,3,49,24,0,231,229,1,0,0,0,232,235,
        1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,
        1,0,0,0,236,237,5,93,0,0,237,60,1,0,0,0,238,239,5,91,0,0,239,244,
        3,51,25,0,240,241,5,44,0,0,241,243,3,51,25,0,242,240,1,0,0,0,243,
        246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,
        244,1,0,0,0,247,248,5,93,0,0,248,62,1,0,0,0,249,250,7,0,0,0,250,
        64,1,0,0,0,251,252,7,1,0,0,252,66,1,0,0,0,253,254,5,92,0,0,254,258,
        5,34,0,0,255,256,5,92,0,0,256,258,5,92,0,0,257,253,1,0,0,0,257,255,
        1,0,0,0,258,68,1,0,0,0,259,261,7,2,0,0,260,259,1,0,0,0,261,262,1,
        0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,265,6,
        34,0,0,265,70,1,0,0,0,266,270,5,10,0,0,267,268,5,13,0,0,268,270,
        5,10,0,0,269,266,1,0,0,0,269,267,1,0,0,0,270,72,1,0,0,0,271,272,
        5,60,0,0,272,275,5,61,0,0,273,275,5,60,0,0,274,271,1,0,0,0,274,273,
        1,0,0,0,275,74,1,0,0,0,17,0,171,176,182,189,191,196,198,206,208,
        222,233,244,257,262,269,274,1,6,0,0
    ]

class AssignmentStatementLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    INT = 24
    FLOAT = 25
    String = 26
    ID = 27
    ARRAY_TYPE = 28
    INT_ARRAY = 29
    FLOAT_ARRAY = 30
    STRING_ARRAY = 31
    WS = 32
    NEWLINE = 33
    RELOP = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'var'", "':'", "'float'", "'int'", "'string'", 
            "'begin'", "'end'", "'if'", "'then'", "'else'", "'for'", "'('", 
            "';'", "')'", "'while'", "'switch'", "'case'", "':='", "'+'", 
            "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "String", "ID", "ARRAY_TYPE", "INT_ARRAY", "FLOAT_ARRAY", 
            "STRING_ARRAY", "WS", "NEWLINE", "RELOP" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "INT", "FLOAT", "String", "ID", 
                  "ARRAY_TYPE", "INT_ARRAY", "FLOAT_ARRAY", "STRING_ARRAY", 
                  "DIGIT", "LETTER", "ESC", "WS", "NEWLINE", "RELOP" ]

    grammarFileName = "AssignmentStatement.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


