# Generated from /Users/elhamgholami/PycharmProjects/InClassPresentation/AssignmentStatement.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,201,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
        1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        13,1,13,1,14,4,14,103,8,14,11,14,12,14,104,1,15,4,15,108,8,15,11,
        15,12,15,109,1,15,1,15,5,15,114,8,15,10,15,12,15,117,9,15,1,15,1,
        15,4,15,121,8,15,11,15,12,15,122,3,15,125,8,15,1,16,1,16,1,16,5,
        16,130,8,16,10,16,12,16,133,9,16,1,16,1,16,1,17,1,17,1,17,5,17,140,
        8,17,10,17,12,17,143,9,17,1,18,1,18,1,18,1,18,5,18,149,8,18,10,18,
        12,18,152,9,18,1,18,1,18,1,19,1,19,1,19,1,19,5,19,160,8,19,10,19,
        12,19,163,9,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,171,8,20,10,20,
        12,20,174,9,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,
        3,23,186,8,23,1,24,4,24,189,8,24,11,24,12,24,190,1,24,1,24,1,25,
        1,25,1,26,1,26,1,26,3,26,200,8,26,1,131,0,27,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,0,45,0,47,0,49,22,51,23,53,24,1,0,
        3,1,0,48,57,2,0,65,90,97,122,3,0,9,9,13,13,32,32,212,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,58,1,0,0,0,5,63,
        1,0,0,0,7,68,1,0,0,0,9,70,1,0,0,0,11,73,1,0,0,0,13,79,1,0,0,0,15,
        83,1,0,0,0,17,89,1,0,0,0,19,91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,
        0,25,97,1,0,0,0,27,99,1,0,0,0,29,102,1,0,0,0,31,124,1,0,0,0,33,126,
        1,0,0,0,35,136,1,0,0,0,37,144,1,0,0,0,39,155,1,0,0,0,41,166,1,0,
        0,0,43,177,1,0,0,0,45,179,1,0,0,0,47,185,1,0,0,0,49,188,1,0,0,0,
        51,194,1,0,0,0,53,199,1,0,0,0,55,56,5,105,0,0,56,57,5,102,0,0,57,
        2,1,0,0,0,58,59,5,116,0,0,59,60,5,104,0,0,60,61,5,101,0,0,61,62,
        5,110,0,0,62,4,1,0,0,0,63,64,5,101,0,0,64,65,5,108,0,0,65,66,5,115,
        0,0,66,67,5,101,0,0,67,6,1,0,0,0,68,69,5,62,0,0,69,8,1,0,0,0,70,
        71,5,58,0,0,71,72,5,61,0,0,72,10,1,0,0,0,73,74,5,98,0,0,74,75,5,
        101,0,0,75,76,5,103,0,0,76,77,5,105,0,0,77,78,5,110,0,0,78,12,1,
        0,0,0,79,80,5,101,0,0,80,81,5,110,0,0,81,82,5,100,0,0,82,14,1,0,
        0,0,83,84,5,119,0,0,84,85,5,104,0,0,85,86,5,105,0,0,86,87,5,108,
        0,0,87,88,5,101,0,0,88,16,1,0,0,0,89,90,5,43,0,0,90,18,1,0,0,0,91,
        92,5,45,0,0,92,20,1,0,0,0,93,94,5,42,0,0,94,22,1,0,0,0,95,96,5,47,
        0,0,96,24,1,0,0,0,97,98,5,40,0,0,98,26,1,0,0,0,99,100,5,41,0,0,100,
        28,1,0,0,0,101,103,3,43,21,0,102,101,1,0,0,0,103,104,1,0,0,0,104,
        102,1,0,0,0,104,105,1,0,0,0,105,30,1,0,0,0,106,108,3,43,21,0,107,
        106,1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,
        111,1,0,0,0,111,115,5,46,0,0,112,114,3,43,21,0,113,112,1,0,0,0,114,
        117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,125,1,0,0,0,117,
        115,1,0,0,0,118,120,5,46,0,0,119,121,3,43,21,0,120,119,1,0,0,0,121,
        122,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,
        107,1,0,0,0,124,118,1,0,0,0,125,32,1,0,0,0,126,131,5,34,0,0,127,
        130,3,47,23,0,128,130,9,0,0,0,129,127,1,0,0,0,129,128,1,0,0,0,130,
        133,1,0,0,0,131,132,1,0,0,0,131,129,1,0,0,0,132,134,1,0,0,0,133,
        131,1,0,0,0,134,135,5,34,0,0,135,34,1,0,0,0,136,141,3,45,22,0,137,
        140,3,45,22,0,138,140,3,43,21,0,139,137,1,0,0,0,139,138,1,0,0,0,
        140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,36,1,0,0,0,143,
        141,1,0,0,0,144,145,5,91,0,0,145,150,3,29,14,0,146,147,5,44,0,0,
        147,149,3,29,14,0,148,146,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,
        0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,154,5,93,0,
        0,154,38,1,0,0,0,155,156,5,91,0,0,156,161,3,31,15,0,157,158,5,44,
        0,0,158,160,3,31,15,0,159,157,1,0,0,0,160,163,1,0,0,0,161,159,1,
        0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,165,5,
        93,0,0,165,40,1,0,0,0,166,167,5,91,0,0,167,172,3,33,16,0,168,169,
        5,44,0,0,169,171,3,33,16,0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,
        1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,
        5,93,0,0,176,42,1,0,0,0,177,178,7,0,0,0,178,44,1,0,0,0,179,180,7,
        1,0,0,180,46,1,0,0,0,181,182,5,92,0,0,182,186,5,34,0,0,183,184,5,
        92,0,0,184,186,5,92,0,0,185,181,1,0,0,0,185,183,1,0,0,0,186,48,1,
        0,0,0,187,189,7,2,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,
        0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,6,24,0,0,193,50,1,
        0,0,0,194,195,5,10,0,0,195,52,1,0,0,0,196,197,5,60,0,0,197,200,5,
        61,0,0,198,200,5,60,0,0,199,196,1,0,0,0,199,198,1,0,0,0,200,54,1,
        0,0,0,16,0,104,109,115,122,124,129,131,139,141,150,161,172,185,190,
        199,1,6,0,0
    ]

class AssignmentStatementLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    INT = 15
    FLOAT = 16
    String = 17
    ID = 18
    INT_ARRAY = 19
    FLOAT_ARRAY = 20
    STRING_ARRAY = 21
    WS = 22
    NEWLINE = 23
    RELOP = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'then'", "'else'", "'>'", "':='", "'begin'", "'end'", 
            "'while'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "String", "ID", "INT_ARRAY", "FLOAT_ARRAY", 
            "STRING_ARRAY", "WS", "NEWLINE", "RELOP" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "INT", "FLOAT", "String", "ID", "INT_ARRAY", "FLOAT_ARRAY", 
                  "STRING_ARRAY", "DIGIT", "LETTER", "ESC", "WS", "NEWLINE", 
                  "RELOP" ]

    grammarFileName = "AssignmentStatement.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


