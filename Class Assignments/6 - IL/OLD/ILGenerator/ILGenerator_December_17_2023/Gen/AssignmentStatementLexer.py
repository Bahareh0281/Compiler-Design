# Generated from C:/PHD/Best_midterms/??? ???????/ASTListener/AssignmentStatement.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,333,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,4,35,226,8,35,11,35,12,35,227,1,36,
        4,36,231,8,36,11,36,12,36,232,1,36,1,36,5,36,237,8,36,10,36,12,36,
        240,9,36,1,36,1,36,4,36,244,8,36,11,36,12,36,245,3,36,248,8,36,1,
        37,1,37,1,37,5,37,253,8,37,10,37,12,37,256,9,37,1,37,1,37,1,38,1,
        38,1,38,5,38,263,8,38,10,38,12,38,266,9,38,1,39,1,39,1,39,1,39,1,
        39,1,40,1,40,1,40,1,40,5,40,277,8,40,10,40,12,40,280,9,40,1,40,1,
        40,1,41,1,41,1,41,1,41,5,41,288,8,41,10,41,12,41,291,9,41,1,41,1,
        41,1,42,1,42,1,42,1,42,5,42,299,8,42,10,42,12,42,302,9,42,1,42,1,
        42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,314,8,45,1,46,4,
        46,317,8,46,11,46,12,46,318,1,46,1,46,1,47,1,47,1,47,1,47,3,47,327,
        8,47,1,48,1,48,1,48,3,48,332,8,48,1,254,0,49,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,0,89,0,91,0,93,44,95,45,97,46,1,0,
        3,1,0,48,57,2,0,65,90,97,122,3,0,9,9,13,13,32,32,346,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,
        1,0,0,0,3,107,1,0,0,0,5,111,1,0,0,0,7,113,1,0,0,0,9,119,1,0,0,0,
        11,123,1,0,0,0,13,130,1,0,0,0,15,136,1,0,0,0,17,140,1,0,0,0,19,143,
        1,0,0,0,21,148,1,0,0,0,23,153,1,0,0,0,25,159,1,0,0,0,27,162,1,0,
        0,0,29,169,1,0,0,0,31,171,1,0,0,0,33,173,1,0,0,0,35,175,1,0,0,0,
        37,177,1,0,0,0,39,182,1,0,0,0,41,186,1,0,0,0,43,189,1,0,0,0,45,192,
        1,0,0,0,47,194,1,0,0,0,49,196,1,0,0,0,51,199,1,0,0,0,53,202,1,0,
        0,0,55,205,1,0,0,0,57,208,1,0,0,0,59,211,1,0,0,0,61,214,1,0,0,0,
        63,216,1,0,0,0,65,218,1,0,0,0,67,220,1,0,0,0,69,222,1,0,0,0,71,225,
        1,0,0,0,73,247,1,0,0,0,75,249,1,0,0,0,77,259,1,0,0,0,79,267,1,0,
        0,0,81,272,1,0,0,0,83,283,1,0,0,0,85,294,1,0,0,0,87,305,1,0,0,0,
        89,307,1,0,0,0,91,313,1,0,0,0,93,316,1,0,0,0,95,326,1,0,0,0,97,331,
        1,0,0,0,99,100,5,112,0,0,100,101,5,114,0,0,101,102,5,111,0,0,102,
        103,5,103,0,0,103,104,5,114,0,0,104,105,5,97,0,0,105,106,5,109,0,
        0,106,2,1,0,0,0,107,108,5,118,0,0,108,109,5,97,0,0,109,110,5,114,
        0,0,110,4,1,0,0,0,111,112,5,58,0,0,112,6,1,0,0,0,113,114,5,102,0,
        0,114,115,5,108,0,0,115,116,5,111,0,0,116,117,5,97,0,0,117,118,5,
        116,0,0,118,8,1,0,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,122,
        5,116,0,0,122,10,1,0,0,0,123,124,5,115,0,0,124,125,5,116,0,0,125,
        126,5,114,0,0,126,127,5,105,0,0,127,128,5,110,0,0,128,129,5,103,
        0,0,129,12,1,0,0,0,130,131,5,98,0,0,131,132,5,101,0,0,132,133,5,
        103,0,0,133,134,5,105,0,0,134,135,5,110,0,0,135,14,1,0,0,0,136,137,
        5,101,0,0,137,138,5,110,0,0,138,139,5,100,0,0,139,16,1,0,0,0,140,
        141,5,105,0,0,141,142,5,102,0,0,142,18,1,0,0,0,143,144,5,116,0,0,
        144,145,5,104,0,0,145,146,5,101,0,0,146,147,5,110,0,0,147,20,1,0,
        0,0,148,149,5,101,0,0,149,150,5,108,0,0,150,151,5,115,0,0,151,152,
        5,101,0,0,152,22,1,0,0,0,153,154,5,119,0,0,154,155,5,104,0,0,155,
        156,5,105,0,0,156,157,5,108,0,0,157,158,5,101,0,0,158,24,1,0,0,0,
        159,160,5,100,0,0,160,161,5,111,0,0,161,26,1,0,0,0,162,163,5,115,
        0,0,163,164,5,119,0,0,164,165,5,105,0,0,165,166,5,116,0,0,166,167,
        5,99,0,0,167,168,5,104,0,0,168,28,1,0,0,0,169,170,5,40,0,0,170,30,
        1,0,0,0,171,172,5,41,0,0,172,32,1,0,0,0,173,174,5,123,0,0,174,34,
        1,0,0,0,175,176,5,125,0,0,176,36,1,0,0,0,177,178,5,99,0,0,178,179,
        5,97,0,0,179,180,5,115,0,0,180,181,5,101,0,0,181,38,1,0,0,0,182,
        183,5,102,0,0,183,184,5,111,0,0,184,185,5,114,0,0,185,40,1,0,0,0,
        186,187,5,58,0,0,187,188,5,61,0,0,188,42,1,0,0,0,189,190,5,116,0,
        0,190,191,5,111,0,0,191,44,1,0,0,0,192,193,5,62,0,0,193,46,1,0,0,
        0,194,195,5,60,0,0,195,48,1,0,0,0,196,197,5,61,0,0,197,198,5,61,
        0,0,198,50,1,0,0,0,199,200,5,33,0,0,200,201,5,61,0,0,201,52,1,0,
        0,0,202,203,5,60,0,0,203,204,5,61,0,0,204,54,1,0,0,0,205,206,5,62,
        0,0,206,207,5,61,0,0,207,56,1,0,0,0,208,209,5,38,0,0,209,210,5,38,
        0,0,210,58,1,0,0,0,211,212,5,124,0,0,212,213,5,124,0,0,213,60,1,
        0,0,0,214,215,5,63,0,0,215,62,1,0,0,0,216,217,5,43,0,0,217,64,1,
        0,0,0,218,219,5,45,0,0,219,66,1,0,0,0,220,221,5,42,0,0,221,68,1,
        0,0,0,222,223,5,47,0,0,223,70,1,0,0,0,224,226,3,87,43,0,225,224,
        1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,72,1,
        0,0,0,229,231,3,87,43,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,
        1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,238,5,46,0,0,235,237,
        3,87,43,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,
        1,0,0,0,239,248,1,0,0,0,240,238,1,0,0,0,241,243,5,46,0,0,242,244,
        3,87,43,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,
        1,0,0,0,246,248,1,0,0,0,247,230,1,0,0,0,247,241,1,0,0,0,248,74,1,
        0,0,0,249,254,5,34,0,0,250,253,3,91,45,0,251,253,9,0,0,0,252,250,
        1,0,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,255,1,0,0,0,254,252,
        1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,34,0,0,258,76,
        1,0,0,0,259,264,3,89,44,0,260,263,3,89,44,0,261,263,3,87,43,0,262,
        260,1,0,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,
        265,1,0,0,0,265,78,1,0,0,0,266,264,1,0,0,0,267,268,3,77,38,0,268,
        269,5,91,0,0,269,270,3,71,35,0,270,271,5,93,0,0,271,80,1,0,0,0,272,
        273,5,91,0,0,273,278,3,71,35,0,274,275,5,44,0,0,275,277,3,71,35,
        0,276,274,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,
        0,279,281,1,0,0,0,280,278,1,0,0,0,281,282,5,93,0,0,282,82,1,0,0,
        0,283,284,5,91,0,0,284,289,3,73,36,0,285,286,5,44,0,0,286,288,3,
        73,36,0,287,285,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,
        1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,0,292,293,5,93,0,0,293,84,
        1,0,0,0,294,295,5,91,0,0,295,300,3,75,37,0,296,297,5,44,0,0,297,
        299,3,75,37,0,298,296,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,
        301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,5,93,0,0,304,
        86,1,0,0,0,305,306,7,0,0,0,306,88,1,0,0,0,307,308,7,1,0,0,308,90,
        1,0,0,0,309,310,5,92,0,0,310,314,5,34,0,0,311,312,5,92,0,0,312,314,
        5,92,0,0,313,309,1,0,0,0,313,311,1,0,0,0,314,92,1,0,0,0,315,317,
        7,2,0,0,316,315,1,0,0,0,317,318,1,0,0,0,318,316,1,0,0,0,318,319,
        1,0,0,0,319,320,1,0,0,0,320,321,6,46,0,0,321,94,1,0,0,0,322,327,
        5,10,0,0,323,324,5,13,0,0,324,327,5,10,0,0,325,327,5,13,0,0,326,
        322,1,0,0,0,326,323,1,0,0,0,326,325,1,0,0,0,327,96,1,0,0,0,328,329,
        5,60,0,0,329,332,5,61,0,0,330,332,5,60,0,0,331,328,1,0,0,0,331,330,
        1,0,0,0,332,98,1,0,0,0,17,0,227,232,238,245,247,252,254,262,264,
        278,289,300,313,318,326,331,1,6,0,0
    ]

class AssignmentStatementLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    INT = 36
    FLOAT = 37
    String = 38
    ID = 39
    ARRAY_TYPE = 40
    INT_ARRAY = 41
    FLOAT_ARRAY = 42
    STRING_ARRAY = 43
    WS = 44
    NEWLINE = 45
    RELOP = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'var'", "':'", "'float'", "'int'", "'string'", 
            "'begin'", "'end'", "'if'", "'then'", "'else'", "'while'", "'do'", 
            "'switch'", "'('", "')'", "'{'", "'}'", "'case'", "'for'", "':='", 
            "'to'", "'>'", "'<'", "'=='", "'!='", "'<='", "'>='", "'&&'", 
            "'||'", "'?'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "String", "ID", "ARRAY_TYPE", "INT_ARRAY", "FLOAT_ARRAY", 
            "STRING_ARRAY", "WS", "NEWLINE", "RELOP" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "INT", "FLOAT", "String", "ID", 
                  "ARRAY_TYPE", "INT_ARRAY", "FLOAT_ARRAY", "STRING_ARRAY", 
                  "DIGIT", "LETTER", "ESC", "WS", "NEWLINE", "RELOP" ]

    grammarFileName = "AssignmentStatement.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


