# Generated from C:/PHD/ILGenerator/AssignmentStatement.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,358,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,4,35,228,8,35,11,35,12,35,
        229,1,36,4,36,233,8,36,11,36,12,36,234,1,36,1,36,5,36,239,8,36,10,
        36,12,36,242,9,36,1,36,1,36,4,36,246,8,36,11,36,12,36,247,3,36,250,
        8,36,1,37,1,37,1,37,5,37,255,8,37,10,37,12,37,258,9,37,1,37,1,37,
        1,38,1,38,1,38,5,38,265,8,38,10,38,12,38,268,9,38,1,39,1,39,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,5,40,279,8,40,10,40,12,40,282,9,40,
        1,40,1,40,1,41,1,41,1,41,1,41,5,41,290,8,41,10,41,12,41,293,9,41,
        1,41,1,41,1,42,1,42,1,42,1,42,5,42,301,8,42,10,42,12,42,304,9,42,
        1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,316,8,45,
        1,46,4,46,319,8,46,11,46,12,46,320,1,46,1,46,1,47,1,47,1,47,1,47,
        5,47,329,8,47,10,47,12,47,332,9,47,1,47,1,47,1,47,1,47,1,47,5,47,
        339,8,47,10,47,12,47,342,9,47,1,47,1,47,3,47,346,8,47,1,48,1,48,
        1,48,1,48,3,48,352,8,48,1,49,1,49,1,49,3,49,357,8,49,3,256,330,340,
        0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,0,91,
        0,93,44,95,45,97,46,99,47,1,0,3,1,0,48,57,2,0,65,90,97,122,3,0,9,
        9,13,13,32,32,374,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,109,1,0,
        0,0,5,113,1,0,0,0,7,115,1,0,0,0,9,121,1,0,0,0,11,125,1,0,0,0,13,
        132,1,0,0,0,15,138,1,0,0,0,17,142,1,0,0,0,19,145,1,0,0,0,21,150,
        1,0,0,0,23,155,1,0,0,0,25,161,1,0,0,0,27,164,1,0,0,0,29,171,1,0,
        0,0,31,173,1,0,0,0,33,175,1,0,0,0,35,177,1,0,0,0,37,179,1,0,0,0,
        39,184,1,0,0,0,41,188,1,0,0,0,43,191,1,0,0,0,45,194,1,0,0,0,47,196,
        1,0,0,0,49,198,1,0,0,0,51,201,1,0,0,0,53,204,1,0,0,0,55,207,1,0,
        0,0,57,210,1,0,0,0,59,213,1,0,0,0,61,216,1,0,0,0,63,218,1,0,0,0,
        65,220,1,0,0,0,67,222,1,0,0,0,69,224,1,0,0,0,71,227,1,0,0,0,73,249,
        1,0,0,0,75,251,1,0,0,0,77,261,1,0,0,0,79,269,1,0,0,0,81,274,1,0,
        0,0,83,285,1,0,0,0,85,296,1,0,0,0,87,307,1,0,0,0,89,309,1,0,0,0,
        91,315,1,0,0,0,93,318,1,0,0,0,95,345,1,0,0,0,97,351,1,0,0,0,99,356,
        1,0,0,0,101,102,5,112,0,0,102,103,5,114,0,0,103,104,5,111,0,0,104,
        105,5,103,0,0,105,106,5,114,0,0,106,107,5,97,0,0,107,108,5,109,0,
        0,108,2,1,0,0,0,109,110,5,118,0,0,110,111,5,97,0,0,111,112,5,114,
        0,0,112,4,1,0,0,0,113,114,5,58,0,0,114,6,1,0,0,0,115,116,5,102,0,
        0,116,117,5,108,0,0,117,118,5,111,0,0,118,119,5,97,0,0,119,120,5,
        116,0,0,120,8,1,0,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,
        5,116,0,0,124,10,1,0,0,0,125,126,5,115,0,0,126,127,5,116,0,0,127,
        128,5,114,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,131,5,103,
        0,0,131,12,1,0,0,0,132,133,5,98,0,0,133,134,5,101,0,0,134,135,5,
        103,0,0,135,136,5,105,0,0,136,137,5,110,0,0,137,14,1,0,0,0,138,139,
        5,101,0,0,139,140,5,110,0,0,140,141,5,100,0,0,141,16,1,0,0,0,142,
        143,5,105,0,0,143,144,5,102,0,0,144,18,1,0,0,0,145,146,5,116,0,0,
        146,147,5,104,0,0,147,148,5,101,0,0,148,149,5,110,0,0,149,20,1,0,
        0,0,150,151,5,101,0,0,151,152,5,108,0,0,152,153,5,115,0,0,153,154,
        5,101,0,0,154,22,1,0,0,0,155,156,5,119,0,0,156,157,5,104,0,0,157,
        158,5,105,0,0,158,159,5,108,0,0,159,160,5,101,0,0,160,24,1,0,0,0,
        161,162,5,100,0,0,162,163,5,111,0,0,163,26,1,0,0,0,164,165,5,115,
        0,0,165,166,5,119,0,0,166,167,5,105,0,0,167,168,5,116,0,0,168,169,
        5,99,0,0,169,170,5,104,0,0,170,28,1,0,0,0,171,172,5,40,0,0,172,30,
        1,0,0,0,173,174,5,41,0,0,174,32,1,0,0,0,175,176,5,123,0,0,176,34,
        1,0,0,0,177,178,5,125,0,0,178,36,1,0,0,0,179,180,5,99,0,0,180,181,
        5,97,0,0,181,182,5,115,0,0,182,183,5,101,0,0,183,38,1,0,0,0,184,
        185,5,102,0,0,185,186,5,111,0,0,186,187,5,114,0,0,187,40,1,0,0,0,
        188,189,5,58,0,0,189,190,5,61,0,0,190,42,1,0,0,0,191,192,5,116,0,
        0,192,193,5,111,0,0,193,44,1,0,0,0,194,195,5,62,0,0,195,46,1,0,0,
        0,196,197,5,60,0,0,197,48,1,0,0,0,198,199,5,61,0,0,199,200,5,61,
        0,0,200,50,1,0,0,0,201,202,5,33,0,0,202,203,5,61,0,0,203,52,1,0,
        0,0,204,205,5,60,0,0,205,206,5,61,0,0,206,54,1,0,0,0,207,208,5,62,
        0,0,208,209,5,61,0,0,209,56,1,0,0,0,210,211,5,38,0,0,211,212,5,38,
        0,0,212,58,1,0,0,0,213,214,5,124,0,0,214,215,5,124,0,0,215,60,1,
        0,0,0,216,217,5,63,0,0,217,62,1,0,0,0,218,219,5,43,0,0,219,64,1,
        0,0,0,220,221,5,45,0,0,221,66,1,0,0,0,222,223,5,42,0,0,223,68,1,
        0,0,0,224,225,5,47,0,0,225,70,1,0,0,0,226,228,3,87,43,0,227,226,
        1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,72,1,
        0,0,0,231,233,3,87,43,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,
        1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,240,5,46,0,0,237,239,
        3,87,43,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,
        1,0,0,0,241,250,1,0,0,0,242,240,1,0,0,0,243,245,5,46,0,0,244,246,
        3,87,43,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,
        1,0,0,0,248,250,1,0,0,0,249,232,1,0,0,0,249,243,1,0,0,0,250,74,1,
        0,0,0,251,256,5,34,0,0,252,255,3,91,45,0,253,255,9,0,0,0,254,252,
        1,0,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,257,1,0,0,0,256,254,
        1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,260,5,34,0,0,260,76,
        1,0,0,0,261,266,3,89,44,0,262,265,3,89,44,0,263,265,3,87,43,0,264,
        262,1,0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,
        267,1,0,0,0,267,78,1,0,0,0,268,266,1,0,0,0,269,270,3,77,38,0,270,
        271,5,91,0,0,271,272,3,71,35,0,272,273,5,93,0,0,273,80,1,0,0,0,274,
        275,5,91,0,0,275,280,3,71,35,0,276,277,5,44,0,0,277,279,3,71,35,
        0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,
        0,281,283,1,0,0,0,282,280,1,0,0,0,283,284,5,93,0,0,284,82,1,0,0,
        0,285,286,5,91,0,0,286,291,3,73,36,0,287,288,5,44,0,0,288,290,3,
        73,36,0,289,287,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,
        1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,5,93,0,0,295,84,
        1,0,0,0,296,297,5,91,0,0,297,302,3,75,37,0,298,299,5,44,0,0,299,
        301,3,75,37,0,300,298,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,
        303,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,306,5,93,0,0,306,
        86,1,0,0,0,307,308,7,0,0,0,308,88,1,0,0,0,309,310,7,1,0,0,310,90,
        1,0,0,0,311,312,5,92,0,0,312,316,5,34,0,0,313,314,5,92,0,0,314,316,
        5,92,0,0,315,311,1,0,0,0,315,313,1,0,0,0,316,92,1,0,0,0,317,319,
        7,2,0,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,
        1,0,0,0,321,322,1,0,0,0,322,323,6,46,0,0,323,94,1,0,0,0,324,325,
        5,47,0,0,325,326,5,47,0,0,326,330,1,0,0,0,327,329,9,0,0,0,328,327,
        1,0,0,0,329,332,1,0,0,0,330,331,1,0,0,0,330,328,1,0,0,0,331,333,
        1,0,0,0,332,330,1,0,0,0,333,346,5,10,0,0,334,335,5,47,0,0,335,336,
        5,42,0,0,336,340,1,0,0,0,337,339,9,0,0,0,338,337,1,0,0,0,339,342,
        1,0,0,0,340,341,1,0,0,0,340,338,1,0,0,0,341,343,1,0,0,0,342,340,
        1,0,0,0,343,344,5,42,0,0,344,346,5,47,0,0,345,324,1,0,0,0,345,334,
        1,0,0,0,346,96,1,0,0,0,347,352,5,10,0,0,348,349,5,13,0,0,349,352,
        5,10,0,0,350,352,5,13,0,0,351,347,1,0,0,0,351,348,1,0,0,0,351,350,
        1,0,0,0,352,98,1,0,0,0,353,354,5,60,0,0,354,357,5,61,0,0,355,357,
        5,60,0,0,356,353,1,0,0,0,356,355,1,0,0,0,357,100,1,0,0,0,20,0,229,
        234,240,247,249,254,256,264,266,280,291,302,315,320,330,340,345,
        351,356,1,6,0,0
    ]

class AssignmentStatementLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    INT = 36
    FLOAT = 37
    String = 38
    ID = 39
    ARRAY_TYPE = 40
    INT_ARRAY = 41
    FLOAT_ARRAY = 42
    STRING_ARRAY = 43
    WS = 44
    COMMENT = 45
    NEWLINE = 46
    RELOP = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'var'", "':'", "'float'", "'int'", "'string'", 
            "'begin'", "'end'", "'if'", "'then'", "'else'", "'while'", "'do'", 
            "'switch'", "'('", "')'", "'{'", "'}'", "'case'", "'for'", "':='", 
            "'to'", "'>'", "'<'", "'=='", "'!='", "'<='", "'>='", "'&&'", 
            "'||'", "'?'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "String", "ID", "ARRAY_TYPE", "INT_ARRAY", "FLOAT_ARRAY", 
            "STRING_ARRAY", "WS", "COMMENT", "NEWLINE", "RELOP" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "INT", "FLOAT", "String", "ID", 
                  "ARRAY_TYPE", "INT_ARRAY", "FLOAT_ARRAY", "STRING_ARRAY", 
                  "DIGIT", "LETTER", "ESC", "WS", "COMMENT", "NEWLINE", 
                  "RELOP" ]

    grammarFileName = "AssignmentStatement.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


